
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module pcihello(

	//////////// CLOCK //////////
	CLOCK_50, 	// BANK 4
	CLOCK2_50, 	// BANK 7
	CLOCK3_50, 	// BANK 3A

	//////////// LED (High Active) //////////
	LEDG,
	LEDR,

	//////////// KEY (Active Low) //////////
	KEY,

	// switches
   SW,
	
	//////////// SEG7 (Low Active) //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// PCIe //////////
	PCIE_PERST_N,
	PCIE_REFCLK_P,
	PCIE_RX_P,
	PCIE_TX_P,
	PCIE_WAKE_N,

	//////////// Fan Control //////////
	FAN_CTRL 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED (High Active) //////////
output		     [7:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY (Active Low) //////////
input 		     [3:0]		KEY;
input            [17:0]	   SW;

//////////// SEG7 (Low Active) //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// PCIe //////////
input 		          		PCIE_PERST_N;
input 		          		PCIE_REFCLK_P;
input 		     [1:0]		PCIE_RX_P;
output		     [1:0]		PCIE_TX_P;
output		          		PCIE_WAKE_N;

//////////// Fan Control //////////
inout 		          		FAN_CTRL;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [31:0] hexbus;
wire [31:0] inbus;
wire [31:0] hexbus2;
wire [31:0] redLed;
wire [31:0] greenLed;
wire [31:0] buttons;


//=======================================================
//  Structural coding
//=======================================================

    pcihellocore u0 (
        .pcie_hard_ip_0_rx_in_rx_datain_0       (PCIE_RX_P[0]),       //     pcie_hard_ip_0_rx_in.rx_datain_0
        .pcie_hard_ip_0_tx_out_tx_dataout_0     (PCIE_TX_P[0]),     //    pcie_hard_ip_0_tx_out.tx_dataout_0
        .pcie_hard_ip_0_powerdown_pll_powerdown (PCIE_WAKE_N), // pcie_hard_ip_0_powerdown.pll_powerdown
        .pcie_hard_ip_0_powerdown_gxb_powerdown (PCIE_WAKE_N), //                         .gxb_powerdown
        .pcie_hard_ip_0_refclk_export           (PCIE_REFCLK_P),           //    pcie_hard_ip_0_refclk.export
        .pcie_hard_ip_0_pcie_rstn_export        (PCIE_PERST_N),
        .hexport_external_connection_export     (hexbus),     // hexport_external_connection.export
        .inport_external_connection_export      (inbus),       //  inport_external_connection.export
		  .hexport2_external_connection_export (hexbus2),
		  .rled_external_connection_export (redLed),
		  .gled_external_connection_export (greenLed),
		  .button_external_connection_export (buttons)
    );


	//////////// FAN Control //////////
assign FAN_CTRL = 1'b1; // turn off FAN

assign HEX0 = hexbus[ 6: 0];
assign HEX1 = hexbus[14: 8];
assign HEX2 = hexbus[22:16];
assign HEX3 = hexbus[30:24];

assign HEX4 = hexbus2[ 6: 0];
assign HEX5 = hexbus2[14: 8];
assign HEX6 = hexbus2[22:16];
assign HEX7 = hexbus2[30:24];

assign LEDR[0] = redLed[0];
assign LEDR[1] = redLed[1];
assign LEDR[2] = redLed[2];
assign LEDR[3] = redLed[3];
assign LEDR[4] = redLed[4];
assign LEDR[5] = redLed[5];
assign LEDR[6] = redLed[6];
assign LEDR[7] = redLed[7];
assign LEDR[8] = redLed[8];
assign LEDR[9] = redLed[9];
assign LEDR[10] = redLed[10];
assign LEDR[11] = redLed[11];
assign LEDR[12] = redLed[12];
assign LEDR[13] = redLed[13];
assign LEDR[14] = redLed[14];
assign LEDR[15] = redLed[15];
assign LEDR[16] = redLed[16];
assign LEDR[17] = redLed[17];

// assign LEDR = redLed[17:0];
// assign LEDG = greenLed[7:0];

assign LEDG[0] = greenLed[0];
assign LEDG[1] = greenLed[1];
assign LEDG[2] = greenLed[2];
assign LEDG[3] = greenLed[3];
assign LEDG[4] = greenLed[4];
assign LEDG[5] = greenLed[5];
assign LEDG[6] = greenLed[6];
assign LEDG[7] = greenLed[7];

// assign buttons = KEY[3:0];

assign buttons[0] = KEY[0];
assign buttons[1] = KEY[1];
assign buttons[2] = KEY[2];
assign buttons[3] = KEY[3];

// assign inbus = SW[17:0];
assign inbus[0] = SW[0];
assign inbus[1] = SW[1];
assign inbus[2] = SW[2];
assign inbus[3] = SW[3];
assign inbus[4] = SW[4];
assign inbus[5] = SW[5];
assign inbus[6] = SW[6];
assign inbus[7] = SW[7];
assign inbus[8] = SW[8];
assign inbus[9] = SW[9];
assign inbus[10] = SW[10];
assign inbus[11] = SW[11];
assign inbus[12] = SW[12];
assign inbus[13] = SW[13];
assign inbus[14] = SW[14];
assign inbus[15] = SW[15];
assign inbus[16] = SW[16];
assign inbus[17] = SW[17];


endmodule
